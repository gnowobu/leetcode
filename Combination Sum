//DFS and backtrack.

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        
        Arrays.sort(candidates);// necessary
        
        List<List<Integer>> result = new ArrayList<>();
        
        if(candidates == null || candidates.length == 0) return result;
        
        List<Integer> combination = new ArrayList<>();
        
        FindTheCombinations(candidates, target, combination, result, 0);
        
        return result;
    }
    
    private void FindTheCombinations(int[] candidates, int target, List<Integer> combination, List<List<Integer>> result, int start_index){
        
        if(target == 0){ // terminate condition
            result.add(new ArrayList<> (combination));
            return;
        }
        
        
        int i;
        for(i = start_index; i < candidates.length; i++){
            if(candidates[i] > target) break;
            
            combination.add(candidates[i]);
            FindTheCombinations(candidates, target-candidates[i], combination, result, i);// DFS, continue adding the same element(candidates[i]) to the combination
            combination.remove(combination.size() - 1);//backtrack. current combination has been added to result, remove the last element before new iteration
        }
    }
}
